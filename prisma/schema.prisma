// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // For serverless deployments, use this:
  directUrl = env("DIRECT_URL")
  // If deploying to Vercel, add this:
  relationMode = "prisma"
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String
  name              String?
  role              Role     @default(ANGGOTA)
  nim               String?
  phone             String?
  jurusan           String?
  angkatan          String?
  alamat            String?
  tanggalLahir      DateTime?
  jenisKelamin      String?
  posisi            String   @default("Anggota")
  skillsKeahlian    String?
  motivasi          String?
  pengalamanSebelumnya String?
  hobiMinat         String?
  emergencyContact  String?
  emergencyPhone    String?
  status            Status   @default(PENDING)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  pendaftaran       Pendaftaran?
  downloadLogs      DownloadLog[]

  @@map("users")
}

model Pendaftaran {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  nama              String
  nim               String
  email             String
  phone             String
  jurusan           String
  angkatan          String
  alamat            String
  tanggalLahir      DateTime
  jenisKelamin      String
  skillsKeahlian    String?
  motivasi          String
  pengalamanSebelumnya String?
  fotoProfile       String?
  status            StatusPendaftaran @default(PENDING)
  alasanPenolakan   String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("pendaftaran")
}

model Template {
  id              String   @id @default(cuid())
  judul           String
  kategori        String
  deskripsi       String
  fileName        String   @unique
  filePath        String
  fileSize        String
  fileContent     String?  @db.Text
  downloadCount   Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  downloadLogs    DownloadLog[]

  @@map("templates")
}

model DownloadLog {
  id          String   @id @default(cuid())
  userId      String
  templateId  String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  template    Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  downloadAt  DateTime @default(now())

  @@map("download_logs")
}

enum Role {
  ADMIN
  ANGGOTA
  MAHASISWA_BARU
}

enum Status {
  AKTIF
  NON_AKTIF
  PENDING
}

enum StatusPendaftaran {
  PENDING
  APPROVED
  REJECTED
}
